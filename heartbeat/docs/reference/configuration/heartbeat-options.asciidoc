[[configuration-heartbeat-options]]
=== Heartbeat Configuration

The `heartbeat` section of the +heartbeat.yml+ config file specifies the
list of `monitors` that Heartbeat uses to ping your remote hosts to
determine if they are available. Each `monitor` item begins with a dash (-) and
specifies the type of monitor to use, the hosts to ping, and other settings
that control ping behavior. 

The following example configures two monitors, an `icmp` monitor and a `tcp`
monitor:

//I use the same example here that I use in the config section, but I really think it should probably be different. Suggestions? I do think that we should show more than one monitor in the example, even though it makes the example a bit longer, to show that you can specify more than one monitor.

[source,yaml]
----------------------------------------------------------------------
heartbeat.monitors:
- type: icmp
  name: icmp
  enabled: true
  schedule: '*/5 * * * * * *'
  hosts: ["myhost"]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
  wait: 1s
- type: tcp 
  name: tcp
  enabled: true
  schedule: '@every 5s'
  hosts: ["myhost:12345"]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
heartbeat.scheduler:
  location: 'UTC-08:00'
output.elasticsearch:
  hosts: ["myhost:9200"]
----------------------------------------------------------------------

[[monitor-options]]
==== Monitor Options

You can specify the following options in the `monitors` section of the
+heartbeat.yml+ config file. These options are the same for all monitors.
Each monitor type has additional configuration options that are specific to that
monitor type. See the following sections for more info about those options:

* <<monitor-icmp-options>>
* <<monitor-tcp-options>>
* <<monitor-http-options>>

[[monitor-type]]
===== type

The type of monitor to run. One of:

* `icmp`: Uses an ICMP Echo Request to ping the configured hosts. Requires root
access.
* `tcp`: Connects via TCP and optionally verifies the endpoint by sending and/or
receiving a custom payload.
* `http`: Connects via HTTP and optionally verifies that the host returns the
expected response.

[[monitor-name]]
===== name

The monitor name. This value appears in the <<exported-fields,exported fields>>
under the `monitor` field as the job name and the `type` field as the job type.

[[monitor-enabled]]
===== enabled

A Boolean value that specifies whether the module is enabled. If the `enabled`
option is missing from the configuration block, the module is enabled by
default.

[[monitor-schedule]]
===== schedule

A cron-like expression that specifies the task schedule. For example:

* `*/5 * * * * * *` runs the task every 5 seconds (for example, at 10:00:00,
10:00:05, and so on).
* `@every 5s` runs the task every 5 seconds from the time when Heartbeat was
started.

//Steffen: Should we document the syntax of the cron expression somewhere, or point to a resource if one is available that describes specifically what the scheduler supports

[[monitor-ipv4]]
===== ipv4

A Boolean value that specifies whether to ping using the ipv4 protocol if
hostnames are configured. The default is `true`.

[[monitor-ipv6]]
===== ipv6

A Boolean value that specifies whether to ping using the ipv6 protocol
if hostnames are configured. The default is `true`.

[[monitor-mode]]
===== mode

If `mode` is `any`, the monitor pings only one IP address for a hostname. If
`mode` is `all`, the monitor pings all resolvable IPs for a hostname. The
`mode: all` setting is useful if you are using a DNS-load balancer and want to
ping every IP address for the specified hostname. The default is `any`.

[[monitor-timieout]]
===== timeout

The total running time for each ping test. This is the total time allowed for
testing the connection and exchanging data. The default is 16 seconds (16s).

//Steffen: What happens if this timeout is exceeded?

[[monitor-watch-poll-file]]
===== watch.poll_file

experimental[]

The JSON file to watch for additional monitor configurations. The JSON file can
have multiple objects, each of which specifies a different monitor config.
Heartbeat checks this file periodically and starts a new monitor for any new
objects that are added to the file. For example, imagine that you add 10
new entries to the JSON file, each for a different hostname. When Heartbeat
picks up the changes in the file, it starts a monitor for each host that you've
configured. In this way, the configuration that you specify for the monitor in
the main Heartbeat config file acts like a default config that you can
live-reconfigure by specifying additional configurations in the external JSON
file. 

//Steffen: Not sure I got that quite right, but there you go! BTW, if you delete an object from the JSON file, I guess it stops the monitor that it has running for that object, right?

//TODO: We have to document the structure of the JSON somewhere.

Example configuration:

[source, yaml]
-------------------------------------------------------------------------------
heartbeat.monitors:
- type: icmp
  enabled: true
  schedule: '*/5 * * * * * *'
  hosts: ["myhost:12345"]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
  wait: 1s
  watch.poll_file:
    path: /monitors/myfile.json
    interval: 5s
-------------------------------------------------------------------------------


//Steffen: Can you suggest a realistic path? I have no idea where users would keep these files.  I'm not sure if users specif a glob pattern here or the path to a single file.

*`path`*:: Specifies the path to check for updates. 
*`interval`*:: Specifies how often Heartbeat checks the file for changes.

[[monitor-icmp-options]]
==== ICMP Options

These options are valid when the `type` is `icmp`.

[[monitor-icmp-hosts]]
===== hosts

A list of hosts to ping.

[[monitor-icmp-wait]]
===== wait

The duration to wait before emitting another ICMP Echo Request. The default is 1
second (1s).

[[monitor-tcp-options]]
==== TCP Options

These options are valid when the `type` is `tcp`.

[[monitor-tcp-hosts]]
===== hosts

A list of hosts to ping. The entries in the list can be:

* A plain host name, such as `localhost`, or an IP address. If you specify this
option, you must also specify a value for <<monitor-tcp-ports,`ports`>>.  If the
monitor is configured to use SSL, Heartbeat establishes an SSL/TLS-based
connection. Otherwise, it establishes a plain TCP connection.
* A hostname and port, such as `localhost:12345`. Heartbeat connects
to the port on the specified host. If the monitor is configured to use SSL,
Heartbeat establishes an SSL/TLS-based connection. Otherwise, it establishes
a TCP connection.
* A full URL using the syntax `scheme://<host>:[port]`, where:
** `scheme` is one of `tcp`, `plain`, `ssl` or `tls`. If `tcp` or `plain` is
specified, Heartbeat establishes a TCP connection even if the monitor is
configured to use SSL. If `tls` or `ssl` is specified, Heartbeat establishes
an SSL connection. However, if the monitor is not configured to use SSL, the
system defaults are used (not supported on Windows).
** `host` is the hostname.
** `port` is the port number. If `port` is missing in the URL, the
<<monitor-tcp-ports,`ports`>> setting is required.

// Questions: Can port above be a list of ports, or is it only a single port.

[[monitor-tcp-ports]]
===== ports

A list of ports to ping if the host specified in <<monitor-tcp-hosts,`hosts`>>
does not contain a port number.

Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: tcp 
  schedule: '@every 5s'
  hosts: ["myhost"]
  ports: [80, 9200, 5044]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
-------------------------------------------------------------------------------

[[monitor-tcp-check]]
===== check

An optional payload string to send to the remote host and the expected answer.
If no payload is specified, the endpoint is assumed to be available if the
connection attempt was successful. If `send` is specified without `receive`,
any response is accepted as OK. If `receive` is specified without `send`, no
payload is sent, but the client expects to receive a payload on connect.

Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: tcp 
  schedule: '@every 5s'
  hosts: ["myhost"]
  ports: [80, 9200, 5044]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
  check:
    send: ''
    receive: ''
-------------------------------------------------------------------------------


//Steffen: Can you provide a good example of the values to set for send and receive in the above example?

[[monitor-tcp-proxy-url]]
===== proxy_url

The SOCKS5 proxy URL.

//Steffen: Can we say more about this option?

[[monitor-tcp-proxy-use-local-resolver]]
===== proxy_use_local_resolver

A Boolean value that specifies whether to resolve hostnames locally instead of
resolving them on the SOCKS5 server. The default is false.

[[monitor-tcp-tls-ssl]]
===== ssl

The TLS/SSL connection settings. 

//Steffen: Is this option so that you can check to see if the servers certificates are valid?

Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: tcp 
  schedule: '@every 5s'
  hosts: ["myhost"]
  ports: [80, 9200, 5044]
  ipv4: true
  ipv6: true
  mode: any
  timeout: 16s
  ssl:
    certificate_authorities: ['/etc/ca.crt']
    supported_protocols: ["TLSv1.0", "TLSv1.1", "TLSv1.2"]
-------------------------------------------------------------------------------


//Steffen: How are the values for supported_protocols used?

[[monitor-http-options]]
==== HTTP Options

These options are valid when the `type` is `http`.

[[monitor-http-urls]]
===== urls

A list of URLs to ping.

Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: http 
  schedule: '@every 5s'
  urls: ["http://myhost:80"]
  ipv4: true
  ipv6: true
  mode: any
-------------------------------------------------------------------------------


[[monitor-http-proxy-url]]
===== proxy_url

The HTTP proxy URL. This setting is optional. If not set, the HTTP_PROXY
environment variable is used.

[[monitor-http-username]]
===== username

The username for authenticating with the server. This setting is optional. 

[[monitor-http-password]]
===== password

The password for authenticating with the server. This setting is optional.

//Steffen: When are authentication credential required? If you are sending a request and expecting a response?

[[monitor-http-tls-ssl]]
===== ssl

The TLS/SSL connection settings for use with the HTTPS endpoint. If you don't
specify settings, the system defaults are used. 


Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: http 
  schedule: '@every 5s'
  urls: ["http://myhost:80"]
  ipv4: true
  ipv6: true
  mode: any
  ssl:
    certificate_authorities: ['/etc/ca.crt']
    supported_protocols: ["TLSv1.0", "TLSv1.1", "TLSv1.2"]  
-------------------------------------------------------------------------------


[[monitor-http-check]]
===== check

An optional `request` to send to the remote host and the expected `response`. 

Example configuration:

[source,yaml]
-------------------------------------------------------------------------------
- type: http 
  schedule: '@every 5s'
  urls: ["http://myhost:80"]
  ipv4: true
  ipv6: true
  mode: any
  check.request:
    method: "GET"
    headers:
    body:
  check.response:
    status: 0
    headers:
    body:
-------------------------------------------------------------------------------


//Steffen: I need help filling out the above example with headers and body

Under `check.request`, specify these options:

*`method`*:: The HTTP method to use. Valid values are `"HEAD"`, `"GET"` and
`"POST"`.
*`headers`*:: A dictionary of additional HTTP headers to send.
*`body`*:: Optional request body content.

Under `check.response`, specify these options:

*`status`*:: The expected status code. If this setting is not configured or
it's set to 0, any status code other than 404 is accepted. 
*`headers`*:: The required response headers. 
*`body`*:: The required response body content.

[[monitors-scheduler]]
==== Scheduler Options

You specify options under `scheduler` to control the behavior of the task
scheduler.

Example configuration: 

[source,yaml]
-------------------------------------------------------------------------------
heartbeat.scheduler:
  limit: 0
  location: 'UTC-08:00'
-------------------------------------------------------------------------------


//Steffen: What is a reasonable limit to set in the example? Also, I just sort of guessed at what would be valid for location in my example.


[[heartbeat-scheduler-limit]]
===== limit

The number of concurrent tasks that Heartbeat is allowed to execute. If set
to 0, there is no limit. The default is 0. 

[[heartbeat-scheduler-location]]
===== location

The timezone for the scheduler.

//Steffen: Is the location a required setting? If not, what timezone does the scheduler default to?

  
include::../../../../libbeat/docs/generalconfig.asciidoc[]

include::../../../../libbeat/docs/outputconfig.asciidoc[]

include::../../../../libbeat/docs/shared-path-config.asciidoc[]

include::../../../../libbeat/docs/loggingconfig.asciidoc[]

include::../../../../libbeat/docs/processors-config.asciidoc[]

