html/en/beats/devguide/master/_migrating_dashboards_from_kibana_5_x_to_6_x.html
html/en/beats/devguide/master/archive-dashboards.html
html/en/beats/devguide/master/beater-interface.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/beater-interface.html
@@ -170,13 +170,13 @@
 // shutdown signal is received. The Stop()-method normally will stop the Run()-loop,
 // such that the beat can gracefully shutdown.
 type Beater interface {
-        // The main event loop. This method should block until signalled to stop by an
-        // invocation of the Stop() method.
-        Run(b *Beat) error
-
-        // Stop is invoked to signal that the Run method should finish its execution.
-        // It will be invoked at most once.
-        Stop()
+	// The main event loop. This method should block until signalled to stop by an
+	// invocation of the Stop() method.
+	Run(b *Beat) error
+
+	// Stop is invoked to signal that the Run method should finish its execution.
+	// It will be invoked at most once.
+	Stop()
 }</pre>
           </div>
           <p>
@@ -196,20 +196,20 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">type Countbeat struct {
-        done   chan struct{} <a id="CO1-1"></a><i class="conum" data-value="1"></i>
-        config config.Config <a id="CO1-2"></a><i class="conum" data-value="2"></i>
-        client publisher.Client <a id="CO1-3"></a><i class="conum" data-value="3"></i>
-
-        ...
+	done   chan struct{} <a id="CO1-1"></a><i class="conum" data-value="1"></i>
+	config config.Config <a id="CO1-2"></a><i class="conum" data-value="2"></i>
+	client publisher.Client <a id="CO1-3"></a><i class="conum" data-value="3"></i>
+
+	...
 }
 
 func (bt *Countbeat) Run(b *beat.Beat) error {
-        ...
+	...
 }
 
 
 func (bt *Countbeat) Stop() {
-        ...
+	...
 }</pre>
           </div>
           <p>
@@ -420,16 +420,16 @@
            </p>
            <div class="pre_wrapper lang-go">
             <pre class="programlisting prettyprint lang-go">func New(b *beat.Beat, cfg *common.Config) (beat.Beater, error) {
-        config := config.DefaultConfig
-        if err := cfg.Unpack(&amp;config); err != nil {
-                return nil, fmt.Errorf("Error reading config file: %v", err)
-        }
-
-        bt := &amp;Countbeat{
-                done:   make(chan struct{}),
-                config: config,
-        }
-        return bt, nil
+	config := config.DefaultConfig
+	if err := cfg.Unpack(&amp;config); err != nil {
+		return nil, fmt.Errorf("Error reading config file: %v", err)
+	}
+
+	bt := &amp;Countbeat{
+		done:   make(chan struct{}),
+		config: config,
+	}
+	return bt, nil
 }</pre>
            </div>
            <p>
@@ -459,11 +459,11 @@
 import "time"
 
 type Config struct {
-        Period time.Duration `config:"period"`
+	Period time.Duration `config:"period"`
 }
 
 var DefaultConfig = Config{
-        Period: 1 * time.Second,
+	Period: 1 * time.Second,
 }</pre>
            </div>
            <p>
@@ -576,27 +576,27 @@
            </p>
            <div class="pre_wrapper lang-go">
             <pre class="programlisting prettyprint lang-go">func (bt *Countbeat) Run(b *beat.Beat) error {
-        logp.Info("countbeat is running! Hit CTRL-C to stop it.")
-
-        bt.client = b.Publisher.Connect()
-        ticker := time.NewTicker(bt.config.Period)
-        counter := 1
-        for {
-                select {
-                case &lt;-bt.done:
-                        return nil
-                case &lt;-ticker.C:
-                }
-
-                event := common.MapStr{ <a id="CO2-1"></a><i class="conum" data-value="1"></i>
-                        "@timestamp": common.Time(time.Now()), <a id="CO2-2"></a><i class="conum" data-value="2"></i>
-                        "type":       b.Name,
-                        "counter":    counter,
-                }
-                bt.client.PublishEvent(event) <a id="CO2-3"></a><i class="conum" data-value="3"></i>
-                logp.Info("Event sent")
-                counter++
-        }
+	logp.Info("countbeat is running! Hit CTRL-C to stop it.")
+
+	bt.client = b.Publisher.Connect()
+	ticker := time.NewTicker(bt.config.Period)
+	counter := 1
+	for {
+		select {
+		case &lt;-bt.done:
+			return nil
+		case &lt;-ticker.C:
+		}
+
+		event := common.MapStr{ <a id="CO2-1"></a><i class="conum" data-value="1"></i>
+			"@timestamp": common.Time(time.Now()), <a id="CO2-2"></a><i class="conum" data-value="2"></i>
+			"type":       b.Name,
+			"counter":    counter,
+		}
+		bt.client.PublishEvent(event) <a id="CO2-3"></a><i class="conum" data-value="3"></i>
+		logp.Info("Event sent")
+		counter++
+	}
 }</pre>
            </div>
            <div class="calloutlist">
@@ -731,8 +731,8 @@
            </p>
            <div class="pre_wrapper lang-go">
             <pre class="programlisting prettyprint lang-go">func (bt *Countbeat) Stop() {
-        bt.client.Close()
-        close(bt.done)
+	bt.client.Close()
+	close(bt.done)
 }</pre>
            </div>
           </div>
@@ -766,21 +766,21 @@
             <pre class="programlisting prettyprint lang-go">package main
 
 import (
-        "os"
-
-        "github.com/elastic/beats/libbeat/beat"
-        "github.com/elastic/beats/libbeat/cmd"
-        "github.com/elastic/beats/libbeat/cmd/instance"
-
-        "github.com/kimjmin/countbeat/beater"
+	"os"
+
+	"github.com/elastic/beats/libbeat/beat"
+	"github.com/elastic/beats/libbeat/cmd"
+	"github.com/elastic/beats/libbeat/cmd/instance"
+
+	"github.com/kimjmin/countbeat/beater"
 )
 
 var RootCmd = cmd.GenRootCmdWithSettings(beater.New, instance.Settings{Name: "countbeat"})
 
 func main() {
-        if err := RootCmd.Execute(); err != nil {
-                os.Exit(1)
-        }
+	if err := RootCmd.Execute(); err != nil {
+		os.Exit(1)
+	}
 }</pre>
            </div>
           </div>
html/en/beats/devguide/master/beats-contributing.html
html/en/beats/devguide/master/build-dashboards.html
html/en/beats/devguide/master/community-beats.html
html/en/beats/devguide/master/compiling-and-running.html
html/en/beats/devguide/master/creating-beat-from-metricbeat.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/creating-beat-from-metricbeat.html
@@ -219,7 +219,8 @@
            fetches the master branch. To build your beat on a specific version of libbeat, check out the specific branch (master in the example below):
           </p>
           <div class="pre_wrapper lang-sh">
-           <pre class="programlisting prettyprint lang-sh">git checkout master</pre>
+           <pre class="programlisting prettyprint lang-sh">cd ${GOPATH}/src/github.com/elastic/beats
+git checkout master</pre>
           </div>
           <p>
            Note: If you have multiple go paths use
@@ -285,7 +286,7 @@
            .
           </p>
           <h4>
-           <a id="_step_4_build_amp_run">
+           <a id="_step_4_build_run">
            </a>
            Step 4 - Build &amp; Run
            <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/creating-beat-from-metricbeat.asciidoc" rel="nofollow" title="Edit this page on GitHub">
html/en/beats/devguide/master/creating-metricbeat-module.html
html/en/beats/devguide/master/creating-metricsets.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/creating-metricsets.html
@@ -314,9 +314,9 @@
            <pre class="programlisting prettyprint lang-go">package {metricset}
 
 import (
-        "github.com/elastic/beats/libbeat/common"
-        "github.com/elastic/beats/libbeat/common/cfgwarn"
-        "github.com/elastic/beats/metricbeat/mb"
+	"github.com/elastic/beats/libbeat/common"
+	"github.com/elastic/beats/libbeat/common/cfgwarn"
+	"github.com/elastic/beats/metricbeat/mb"
 )
 
 // init registers the MetricSet with the central registry as soon as the program
@@ -324,7 +324,7 @@
 // the MetricSet for each host defined in the module's configuration. After the
 // MetricSet has been created then Fetch will begin to be called periodically.
 func init() {
-        mb.Registry.MustAddMetricSet("{module}", "{metricset}", New)
+	mb.Registry.MustAddMetricSet("{module}", "{metricset}", New)
 }
 
 // MetricSet holds any configuration or state information. It must implement
@@ -332,38 +332,38 @@
 // mb.BaseMetricSet because it implements all of the required mb.MetricSet
 // interface methods except for Fetch.
 type MetricSet struct {
-        mb.BaseMetricSet
-        counter int
+	mb.BaseMetricSet
+	counter int
 }
 
 // New creates a new instance of the MetricSet. New is responsible for unpacking
 // any MetricSet specific configuration options if there are any.
 func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
-        cfgwarn.Beta("The {module} {metricset} metricset is beta.")
-
-        config := struct{}{}
-        if err := base.Module().UnpackConfig(&amp;config); err != nil {
-                return nil, err
-        }
-
-        return &amp;MetricSet{
-                BaseMetricSet: base,
-                counter:       1,
-        }, nil
+	cfgwarn.Beta("The {module} {metricset} metricset is beta.")
+
+	config := struct{}{}
+	if err := base.Module().UnpackConfig(&amp;config); err != nil {
+		return nil, err
+	}
+
+	return &amp;MetricSet{
+		BaseMetricSet: base,
+		counter:       1,
+	}, nil
 }
 
 // Fetch methods implements the data gathering and data conversion to the right
 // format. It publishes the event which is then forwarded to the output. In case
 // of an error set the Error field of mb.Event or simply call report.Error().
 func (m *MetricSet) Fetch(report mb.ReporterV2) error {
-        report.Event(mb.Event{
-                MetricSetFields: common.MapStr{
-                        "counter": m.counter,
-                },
-        })
-        m.counter++
-
-        return nil
+	report.Event(mb.Event{
+		MetricSetFields: common.MapStr{
+			"counter": m.counter,
+		},
+	})
+	m.counter++
+
+	return nil
 }</pre>
           </div>
           <p>
@@ -405,9 +405,9 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">func init() {
-        if err := mb.Registry.AddMetricSet("{module}", "{metricset}", New); err != nil {
-                panic(err)
-        }
+	if err := mb.Registry.AddMetricSet("{module}", "{metricset}", New); err != nil {
+		panic(err)
+	}
 }</pre>
           </div>
           <h5>
@@ -438,9 +438,9 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">type MetricSet struct {
-        mb.BaseMetricSet
-        username    string
-        password    string
+	mb.BaseMetricSet
+	username    string
+	password    string
 }</pre>
           </div>
           <h5>
@@ -476,15 +476,15 @@
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
 
-        config := struct{}{}
-
-        if err := base.Module().UnpackConfig(&amp;config); err != nil {
-                return nil, err
-        }
-
-        return &amp;MetricSet{
-                BaseMetricSet: base,
-        }, nil
+	config := struct{}{}
+
+	if err := base.Module().UnpackConfig(&amp;config); err != nil {
+		return nil, err
+	}
+
+	return &amp;MetricSet{
+		BaseMetricSet: base,
+	}, nil
 }</pre>
           </div>
           <h5>
@@ -554,14 +554,14 @@
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">func (m *MetricSet) Fetch(report mb.ReporterV2) error {
 
-        report.Event(mb.Event{
-                MetricSetFields: common.MapStr{
-                        "counter": m.counter,
-                }
-        })
-        m.counter++
-
-        return nil
+	report.Event(mb.Event{
+		MetricSetFields: common.MapStr{
+			"counter": m.counter,
+		}
+	})
+	m.counter++
+
+	return nil
 }</pre>
           </div>
           <p>
@@ -633,11 +633,11 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">input := map[string]interface{}{
-        "testString":     "hello",
-        "testInt":        "42",
-        "testBool":       "true",
-        "testFloat":      "42.1",
-        "testObjString":  "hello, object",
+	"testString":     "hello",
+	"testInt":        "42",
+	"testBool":       "true",
+	"testFloat":      "42.1",
+	"testObjString":  "hello, object",
 }</pre>
           </div>
           <p>
@@ -645,13 +645,13 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">common.MapStr{
-        "test_string": "hello",
-        "test_int":    int64(42),
-        "test_bool":   true,
-        "test_float":  42.1,
-        "test_obj": common.MapStr{
-                "test_obj_string": "hello, object",
-        },
+	"test_string": "hello",
+	"test_int":    int64(42),
+	"test_bool":   true,
+	"test_float":  42.1,
+	"test_obj": common.MapStr{
+		"test_obj_string": "hello, object",
+	},
 }</pre>
           </div>
           <p>
@@ -659,24 +659,24 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">import (
-        s "github.com/elastic/beats/libbeat/common/schema"
-        c "github.com/elastic/beats/libbeat/common/schema/mapstrstr"
+	s "github.com/elastic/beats/libbeat/common/schema"
+	c "github.com/elastic/beats/libbeat/common/schema/mapstrstr"
 )
 
 var (
-        schema = s.Schema{
-                "test_string": c.Str("testString", s.Required), <a id="CO3-1"></a><i class="conum" data-value="1"></i>
-                "test_int":    c.Int("testInt"), <a id="CO3-2"></a><i class="conum" data-value="2"></i>
-                "test_bool":   c.Bool("testBool", s.Optional), <a id="CO3-3"></a><i class="conum" data-value="3"></i>
-                "test_float":  c.Float("testFloat"),
-                "test_obj": s.Object{
-                        "test_obj_string": c.Str("testObjString", s.IgnoreAllErrors), <a id="CO3-4"></a><i class="conum" data-value="4"></i>
-                },
-        }
+	schema = s.Schema{
+		"test_string": c.Str("testString", s.Required), <a id="CO3-1"></a><i class="conum" data-value="1"></i>
+		"test_int":    c.Int("testInt"), <a id="CO3-2"></a><i class="conum" data-value="2"></i>
+		"test_bool":   c.Bool("testBool", s.Optional), <a id="CO3-3"></a><i class="conum" data-value="3"></i>
+		"test_float":  c.Float("testFloat"),
+		"test_obj": s.Object{
+			"test_obj_string": c.Str("testObjString", s.IgnoreAllErrors), <a id="CO3-4"></a><i class="conum" data-value="4"></i>
+		},
+	}
 )
 
 func eventMapping(input map[string]interface{}) common.MapStr {
-        return schema.Apply(input) <a id="CO3-5"></a><i class="conum" data-value="5"></i>
+	return schema.Apply(input) <a id="CO3-5"></a><i class="conum" data-value="5"></i>
 }</pre>
           </div>
           <div class="calloutlist">
@@ -809,33 +809,33 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">var (
-        schema = s.Schema{
-                "test_string": c.Str("testString"),
-                "test_int":    c.Int("testInt"),
-                "test_bool":   c.Bool("testBool"),
-                "test_float":  c.Float("testFloat"),
-                "test_obj": s.Object{
-                        "test_obj_string": c.Str("testObjString"),
-                },
-        }
-
-        additionalSchema = s.Schema{
-                "second_string": c.Str("secondString"),
-                "second_int": c.Int("secondInt"),
-        }
+	schema = s.Schema{
+		"test_string": c.Str("testString"),
+		"test_int":    c.Int("testInt"),
+		"test_bool":   c.Bool("testBool"),
+		"test_float":  c.Float("testFloat"),
+		"test_obj": s.Object{
+			"test_obj_string": c.Str("testObjString"),
+		},
+	}
+
+	additionalSchema = s.Schema{
+		"second_string": c.Str("secondString"),
+		"second_int": c.Int("secondInt"),
+	}
 )
 
-        data, err := schema.Apply(input)
-        if err != nil {
-                return err
-        }
-
-        if m.parseMoreData{
-                _, err := additionalSchema.ApplyTo(data, input)
-                if len(err) &gt; 0 { <a id="CO4-1"></a><i class="conum" data-value="1"></i>
-                        return err.Err()
-                }
-        }</pre>
+	data, err := schema.Apply(input)
+	if err != nil {
+		return err
+	}
+
+	if m.parseMoreData{
+		_, err := additionalSchema.ApplyTo(data, input)
+		if len(err) &gt; 0 { <a id="CO4-1"></a><i class="conum" data-value="1"></i>
+			return err.Err()
+		}
+	}</pre>
           </div>
           <div class="calloutlist">
            <table border="0" summary="Callout list">
html/en/beats/devguide/master/dev-faq.html
html/en/beats/devguide/master/event-conventions.html
html/en/beats/devguide/master/export-dashboards.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/export-dashboards.html
@@ -256,7 +256,7 @@
              <div>
               <div>
                <h4 class="title">
-                <a id="_export_all_module_beat_dashboards">
+                <a id="_export_all_modulebeat_dashboards">
                 </a>
                 Export all module/Beat dashboards
                 <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/newdashboards.asciidoc" rel="nofollow" title="Edit this page on GitHub">
html/en/beats/devguide/master/filebeat-modules-devguide.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/filebeat-modules-devguide.html
@@ -273,7 +273,7 @@
            script for exporting dashboards. Each dashboard is defined by an id and the name of json file where the dashboard is saved locally. At generation new fileset this file will be automatically updated with "default" dashboard settings for new fileset. Please ensure that this settings are correct.
           </p>
           <h4>
-           <a id="_meta_docs_asciidoc">
+           <a id="_metadocs_asciidoc">
            </a>
            _meta/docs.asciidoc
            <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/modules-dev-guide.asciidoc" rel="nofollow" title="Edit this page on GitHub">
@@ -284,7 +284,7 @@
            This file contains module-specific documentation. You should include information about which versions of the service were tested and the variables that are defined in each fileset.
           </p>
           <h4>
-           <a id="_meta_fields_yml">
+           <a id="_metafields_yml">
            </a>
            _meta/fields.yml
            <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/modules-dev-guide.asciidoc" rel="nofollow" title="Edit this page on GitHub">
@@ -299,7 +299,7 @@
            contains descriptions for the module-level fields. Please review and update the title and the descriptions in this file. The title is used as a title in the docs, so it’s best to capitalize it.
           </p>
           <h4>
-           <a id="_meta_kibana">
+           <a id="_metakibana">
            </a>
            _meta/kibana
            <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/modules-dev-guide.asciidoc" rel="nofollow" title="Edit this page on GitHub">
@@ -870,7 +870,7 @@
            command. This uploads pipelines even if they are already available on the node.
           </p>
           <h4>
-           <a id="_meta_fields_yml_2">
+           <a id="_metafields_yml_2">
            </a>
            _meta/fields.yml
            <a class="edit_me" href="https://github.com/elastic/beats/edit/master/docs/devguide/modules-dev-guide.asciidoc" rel="nofollow" title="Edit this page on GitHub">
html/en/beats/devguide/master/generate-index-pattern.html
html/en/beats/devguide/master/getting-ready-new-protocol.html
html/en/beats/devguide/master/import-dashboards.html
html/en/beats/devguide/master/index.html
html/en/beats/devguide/master/metricbeat-dev-overview.html
html/en/beats/devguide/master/metricbeat-developer-guide.html
html/en/beats/devguide/master/metricset-details.html
--- /dev/fd/63
+++ html/en/beats/devguide/master/metricset-details.html
@@ -206,27 +206,27 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">type MetricSet struct {
-        mb.BaseMetricSet
-        password string
+	mb.BaseMetricSet
+	password string
 }
 
 func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
 
-        // Unpack additional configuration options.
-        config := struct {
-                Password string `config:"password"`
-        }{
-                Password: "",
-        }
-        err := base.Module().UnpackConfig(&amp;config)
-        if err != nil {
-                return nil, err
-        }
-
-        return &amp;MetricSet{
-                BaseMetricSet: base,
-                password:      config.Password,
-        }, nil
+	// Unpack additional configuration options.
+	config := struct {
+		Password string `config:"password"`
+	}{
+		Password: "",
+	}
+	err := base.Module().UnpackConfig(&amp;config)
+	if err != nil {
+		return nil, err
+	}
+
+	return &amp;MetricSet{
+		BaseMetricSet: base,
+		password:      config.Password,
+	}, nil
 }</pre>
           </div>
           <h4>
@@ -631,37 +631,37 @@
           </p>
           <div class="pre_wrapper lang-go">
            <pre class="programlisting prettyprint lang-go">import (
-        "os"
-        "testing"
-
-        "github.com/stretchr/testify/assert"
-
-        "github.com/elastic/beats/libbeat/tests/compose"
-        mbtest "github.com/elastic/beats/metricbeat/mb/testing"
+	"os"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+
+	"github.com/elastic/beats/libbeat/tests/compose"
+	mbtest "github.com/elastic/beats/metricbeat/mb/testing"
 )
 
 func TestFetch(t *testing.T) {
-        compose.EnsureUp(t, "{module}") <a id="CO6-1"></a><i class="conum" data-value="1"></i>
-
-        f := mbtest.NewReportingMetricSetV2Error(t, getConfig())
-
-        events, errs := mbtest.ReportingFetchV2Error(f)
-        if len(errs) &gt; 0 {
-                t.Fatalf("Expected 0 errord, had %d. %v\n", len(errs), errs)
-        }
-
-        assert.NotEmpty(t, events) <a id="CO6-2"></a><i class="conum" data-value="2"></i>
+	compose.EnsureUp(t, "{module}") <a id="CO6-1"></a><i class="conum" data-value="1"></i>
+
+	f := mbtest.NewReportingMetricSetV2Error(t, getConfig())
+
+	events, errs := mbtest.ReportingFetchV2Error(f)
+	if len(errs) &gt; 0 {
+		t.Fatalf("Expected 0 errord, had %d. %v\n", len(errs), errs)
+	}
+
+	assert.NotEmpty(t, events) <a id="CO6-2"></a><i class="conum" data-value="2"></i>
 
 }
 
 func TestData(t *testing.T) {
 
-        f := mbtest.NewReportingMetricSetV2Error(t, getConfig())
-
-        err := mbtest.WriteEventsReporterV2Error(f, t, "") <a id="CO6-3"></a><i class="conum" data-value="3"></i>
-        if !assert.NoError(t, err) {
-                t.FailNow()
-        }
+	f := mbtest.NewReportingMetricSetV2Error(t, getConfig())
+
+	err := mbtest.WriteEventsReporterV2Error(f, t, "") <a id="CO6-3"></a><i class="conum" data-value="3"></i>
+	if !assert.NoError(t, err) {
+		t.FailNow()
+	}
 }</pre>
           </div>
           <div class="calloutlist">
html/en/beats/devguide/master/new-beat.html
html/en/beats/devguide/master/new-dashboards.html
html/en/beats/devguide/master/new-protocol.html
html/en/beats/devguide/master/newbeat-generate.html
html/en/beats/devguide/master/newbeat-getting-ready.html
html/en/beats/devguide/master/newbeat-overview.html
html/en/beats/devguide/master/newbeat-sharing.html
html/en/beats/devguide/master/pr-review.html
html/en/beats/devguide/master/protocol-modules.html
html/en/beats/devguide/master/setting-up-beat.html
html/en/beats/devguide/master/share-beat-dashboards.html
html/en/beats/devguide/master/testing.html
html/en/beats/devguide/master/toc.html
