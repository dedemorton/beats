:has_module_steps:

[[filebeat-modules-quickstart]]
=== Quick start: modules for common log formats

// REVIEWERS: Should we include docker commands here, too?

{beatname_uc} provides a set of pre-built modules that you can use to rapidly
implement and deploy a log monitoring solution, complete with sample dashboards
and data visualizations, in about 5 minutes. These modules support common log
formats, such as Nginx, Apache2, and MySQL, and can be run by issuing a simple
command.

This topic shows you how to run the basic modules with minimal extra
configuration. For detailed documentation and the full list of available
modules, see <<filebeat-modules>>.

If you are using a log file type that isn't supported by one of the available
{beatname_uc} modules, you'll need to set up and configure {beatname_uc} manually by
following the numbered steps under <<filebeat-getting-started>>.

==== Prerequisites

Before running {beatname_uc} modules, you need to:

* Install and configure the Elastic stack. See
{stack-ov}/get-started-elastic-stack.html[Getting started with the {stack}].

* Complete the {beatname_uc} installation instructions described in
<<filebeat-installation>>. After installing {beatname_uc}, return to this
quick start page.

* Install the Ingest Node GeoIP and User Agent plugins. These plugins are
required to capture the geographical location and browser information used by
some of the visualizations available in the sample dashboards. You can install
these plugins by running the following commands in the {es} home path:
+
[source,shell]
----------------------------------------------------------------------
sudo bin/elasticsearch-plugin install ingest-geoip
sudo bin/elasticsearch-plugin install ingest-user-agent
----------------------------------------------------------------------
+
You need to restart {es} after running these commands.
+
If you are using an https://cloud.elastic.co/[Elastic Cloud] instance, you can
enable the two plugins from the configuration page.

* Verify that {es} and {kib} are running and that {es} is
ready to receive data from {beatname_uc}.

[[running-modules-quickstart]]
==== Running {beatname_uc} modules

To set up and run {beatname_uc} modules:

. In the +{beatname_lc}.yml+ config file, set the location of the {es}
installation. By default, {beatname_uc} assumes {es} is running locally on port
9200.
+
include::../../libbeat/docs/step-configure-output.asciidoc[]

include::../../libbeat/docs/step-configure-credentials.asciidoc[]

. Enable the modules you want to run. For example, the following command enables
the system, nginx, and mysql modules:
+
*deb and rpm:*
+
["source","sh",subs="attributes"]
----
{beatname_lc} modules enable system nginx mysql
----
+
*mac:*
+
["source","sh",subs="attributes"]
----
./{beatname_lc} modules enable system nginx mysql
----
+
*win:*
+
["source","sh",subs="attributes"]
----
PS > .{backslash}{beatname_lc}.exe modules enable system nginx mysql
----
+
The <<modules-command,`modules enable`>> command enables the module configs
defined in the `modules.d` directory. See
<<configuration-{beatname_lc}-modules>> for other ways to enable modules.
+
To see a list of enabled and disabled modules, run:
+
*deb and rpm:*
+
["source","sh",subs="attributes"]
----
{beatname_lc} modules list
----
+
*mac:*
+
["source","sh",subs="attributes"]
----
./{beatname_lc} modules list
----
+
*win:*
+
["source","sh",subs="attributes"]
----
PS > .{backslash}{beatname_lc}.exe modules list
----

. Set up the initial environment:
+
*deb and rpm:*
+
["source","sh",subs="attributes"]
----
{beatname_lc} setup -e
----
+
*mac:*
+
["source","sh",subs="attributes"]
----
./{beatname_lc} setup -e
----
+
*win:*
+
["source","sh",subs="attributes"]
----
PS > .{backslash}{beatname_lc}.exe setup -e
----
+
The <<setup-command,`setup`>> command loads the recommended index template for
writing to {es} and deploys the sample dashboards for visualizing the
data in {kib}. This is a one-time setup step. 
+
The `-e` flag is optional and sends output to standard error instead of syslog.

. Run {beatname_uc}:
+
*deb and rpm:*
+
["source","sh",subs="attributes"]
----
service {beatname_lc} start
----
+
*mac:*
+
["source","sh",subs="attributes"]
----
./{beatname_lc} -e
----
+
*win:*
+
["source","sh",subs="attributes"]
----
PS > Start-Service {beatname_lc}
----
+
If the module is configured correctly, you'll see
`INFO Harvester started` messages for each file specified in the config.
+
If your logs aren't in the default location, see <<setting-variables>> to find
out how to set the path the files, then run {beatname_uc} after you've
configured the module.
+
NOTE: Depending on how you've installed {beatname_uc}, you might see errors
related to file ownership or permissions when you try to run {beatname_uc} modules.
See {libbeat}/config-file-permissions.html[Config File Ownership and Permissions]
in the _Beats Platform Reference_ if you encounter errors related to file
ownership or permissions. 

[[setting-variables]]
==== Set the path variable

The examples here assume that the logs you're harvesting are in the location
expected for your OS and that the default behavior of {beatname_uc} is appropriate
for your environment. Each module provides variables that you can set to fine
tune the behavior of {beatname_uc}, including the location where it looks for log
files. For example, the following command sets the path for the Nginx access
logs. For this command to work, the `nginx` module must be enabled.

// REVIEWERS: I want to provide platform-specific examples, but I'm not sure
// what theses commands look like for deb/rpm/windows. I assume we want to
// tell users to start the service, but I don't think options like -M are
// allowed when you start as a service. Are they? Hoping someone with
// deb/rpm/windows experience can help me get the syntax right here.

*deb and rpm:*

["source","sh",subs="attributes"]
----
TBD
----

*mac:*

["source","sh",subs="attributes"]
----
./{beatname_lc} -e -M "nginx.access.var.paths=[/var/log/nginx/access.log*]"
----

*win:*

["source","sh",subs="attributes"]
----
PS > TBD
----

See <<configuration-filebeat-modules>> for more information about setting
variables and advanced options.


[[visualizing-data]]
==== Visualize the data in {kib}

After confirming that {beatname_uc} is sending events to {es}, open your
browser and navigate to the Dashboard overview in {kib}. For example:
http://localhost:5601/app/kibana#/dashboards. Replace `localhost` with the name
of the {kib} host. If you are using an https://cloud.elastic.co/[Elastic Cloud]
instance, navigate to the {kib} endpoint and log in.

Open the dashboards for any modules that you've configured, and explore the
visualizations for your parsed logs.

TIP: If you don't see data in {kib}, try changing the date range to a larger
range. By default, {kib} shows the last 15 minutes.

Here's an example of the syslog dashboard:

image:./images/kibana-system.png[Syslog dashboard]
